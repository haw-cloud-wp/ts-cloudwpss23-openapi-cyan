"use strict";
/**
 * cloudwpss23-openapi-cyan
 * OpenAPI Reference für das CloudWP der HAW Hamburg für das SommerSemster 2023
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = void 0;
var $ = require("jquery");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var DefaultApi = /** @class */ (function () {
    function DefaultApi(basePath, configuration, defaultExtraJQueryAjaxSettings) {
        this.basePath = 'http://localhost:3000';
        this.defaultHeaders = [];
        this.defaultExtraJQueryAjaxSettings = undefined;
        this.configuration = new configuration_1.Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        if (defaultExtraJQueryAjaxSettings) {
            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;
        }
    }
    DefaultApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * @summary Your GET endpoint
     */
    DefaultApi.prototype.getApiExternal = function (extraJQueryAjaxSettings) {
        var localVarPath = this.basePath + '/api/external';
        var queryParameters = {};
        var headerParams = {};
        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (bearer) required
        // oauth required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }
        var requestOptions = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        if (extraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, extraJQueryAjaxSettings);
        }
        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }
        var dfd = $.Deferred();
        $.ajax(requestOptions).then(function (data, textStatus, jqXHR) {
            return dfd.resolve({ response: jqXHR, body: data });
        }, function (xhr, textStatus, errorThrown) {
            return dfd.reject({ response: xhr, errorThrown: errorThrown });
        });
        return dfd.promise();
    };
    /**
     * Retrieve the information of the user with the matching user ID.
     * @summary Get User Info by User ID
     * @param userId Id of an existing user.
     */
    DefaultApi.prototype.getUsersUserId = function (userId, extraJQueryAjaxSettings) {
        var localVarPath = this.basePath + '/users/{userId}'.replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = {};
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUsersUserId.');
        }
        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (bearer) required
        // oauth required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }
        var requestOptions = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        if (extraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, extraJQueryAjaxSettings);
        }
        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }
        var dfd = $.Deferred();
        $.ajax(requestOptions).then(function (data, textStatus, jqXHR) {
            return dfd.resolve({ response: jqXHR, body: data });
        }, function (xhr, textStatus, errorThrown) {
            return dfd.reject({ response: xhr, errorThrown: errorThrown });
        });
        return dfd.promise();
    };
    /**
     *
     * @summary
     */
    DefaultApi.prototype.optionsApiExternal = function (extraJQueryAjaxSettings) {
        var localVarPath = this.basePath + '/api/external';
        var queryParameters = {};
        var headerParams = {};
        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (bearer) required
        // oauth required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }
        var requestOptions = {
            url: localVarPath,
            type: 'OPTIONS',
            headers: headerParams,
            processData: false
        };
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        if (extraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, extraJQueryAjaxSettings);
        }
        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }
        var dfd = $.Deferred();
        $.ajax(requestOptions).then(function (data, textStatus, jqXHR) {
            return dfd.resolve({ response: jqXHR, body: data });
        }, function (xhr, textStatus, errorThrown) {
            return dfd.reject({ response: xhr, errorThrown: errorThrown });
        });
        return dfd.promise();
    };
    /**
     *
     * @summary
     */
    DefaultApi.prototype.optionsUser = function (extraJQueryAjaxSettings) {
        var localVarPath = this.basePath + '/user';
        var queryParameters = {};
        var headerParams = {};
        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (bearer) required
        // oauth required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }
        var requestOptions = {
            url: localVarPath,
            type: 'OPTIONS',
            headers: headerParams,
            processData: false
        };
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        if (extraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, extraJQueryAjaxSettings);
        }
        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }
        var dfd = $.Deferred();
        $.ajax(requestOptions).then(function (data, textStatus, jqXHR) {
            return dfd.resolve({ response: jqXHR, body: data });
        }, function (xhr, textStatus, errorThrown) {
            return dfd.reject({ response: xhr, errorThrown: errorThrown });
        });
        return dfd.promise();
    };
    /**
     *
     * @summary
     * @param userId Id of an existing user.
     */
    DefaultApi.prototype.optionsUsersUserId = function (userId, extraJQueryAjaxSettings) {
        var localVarPath = this.basePath + '/users/{userId}'.replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = {};
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling optionsUsersUserId.');
        }
        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (bearer) required
        // oauth required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }
        var requestOptions = {
            url: localVarPath,
            type: 'OPTIONS',
            headers: headerParams,
            processData: false
        };
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        if (extraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, extraJQueryAjaxSettings);
        }
        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }
        var dfd = $.Deferred();
        $.ajax(requestOptions).then(function (data, textStatus, jqXHR) {
            return dfd.resolve({ response: jqXHR, body: data });
        }, function (xhr, textStatus, errorThrown) {
            return dfd.reject({ response: xhr, errorThrown: errorThrown });
        });
        return dfd.promise();
    };
    /**
     * Update the information of an existing user.
     * @summary Update User Information
     * @param userId Id of an existing user.
     * @param patchUsersUserIdRequest Patch user properties to update.
     */
    DefaultApi.prototype.patchUsersUserId = function (userId, patchUsersUserIdRequest, extraJQueryAjaxSettings) {
        var localVarPath = this.basePath + '/users/{userId}'.replace('{' + 'userId' + '}', encodeURIComponent(String(userId)));
        var queryParameters = {};
        var headerParams = {};
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling patchUsersUserId.');
        }
        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (bearer) required
        // oauth required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }
        headerParams['Content-Type'] = 'application/json';
        var requestOptions = {
            url: localVarPath,
            type: 'PATCH',
            headers: headerParams,
            processData: false
        };
        requestOptions.data = JSON.stringify(patchUsersUserIdRequest);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        if (extraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, extraJQueryAjaxSettings);
        }
        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }
        var dfd = $.Deferred();
        $.ajax(requestOptions).then(function (data, textStatus, jqXHR) {
            return dfd.resolve({ response: jqXHR, body: data });
        }, function (xhr, textStatus, errorThrown) {
            return dfd.reject({ response: xhr, errorThrown: errorThrown });
        });
        return dfd.promise();
    };
    /**
     * Create a new user.
     * @summary Create New User
     * @param postUserRequest Post the necessary fields for the API to create a new user.
     */
    DefaultApi.prototype.postUser = function (postUserRequest, extraJQueryAjaxSettings) {
        var localVarPath = this.basePath + '/user';
        var queryParameters = {};
        var headerParams = {};
        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        var consumes = [
            'application/json'
        ];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (bearer) required
        // oauth required
        if (this.configuration.accessToken) {
            var accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headerParams['Authorization'] = 'Bearer ' + accessToken;
        }
        headerParams['Content-Type'] = 'application/json';
        var requestOptions = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };
        requestOptions.data = JSON.stringify(postUserRequest);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        if (extraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, extraJQueryAjaxSettings);
        }
        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = Object.assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }
        var dfd = $.Deferred();
        $.ajax(requestOptions).then(function (data, textStatus, jqXHR) {
            return dfd.resolve({ response: jqXHR, body: data });
        }, function (xhr, textStatus, errorThrown) {
            return dfd.reject({ response: xhr, errorThrown: errorThrown });
        });
        return dfd.promise();
    };
    return DefaultApi;
}());
exports.DefaultApi = DefaultApi;
